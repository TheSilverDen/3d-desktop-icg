const cheerio = require('cheerio');
const fs = require('fs');
const path = require('path');

// The index page is autogenerated when starting the server and is not part of the boilerplate.
// The html files have to have the following elements in the head:
// <meta name="title" content="Exercise Name">
// <meta name="description" content="Exercise Description">
// <meta name="ordinal" content="Exercise Ordinal">
// <meta name="difficulty" content="Exercise Difficulty">
// <meta name="tag" content="Exercise Tags">
// <meta name="icon" content="preview img file location">
// difficulty and tags are optional. The tags should be comma separated. The difficulty should be a number between 1 and 5.
// This is of course non standard, but it is the easiest way to get the information into the index page.
function generateIndexHtml() {
    const htmlFiles = fs.readdirSync('./dist').filter(file => file !== 'index.html' && file.endsWith('.html'));

    //Read the metadata from the html files. They might be optional, so we have to check if they are present.
    const metadata = htmlFiles.map(file => {
        const htmlContent = fs.readFileSync(`./dist/${file}`, 'utf-8');
        const $ = cheerio.load(htmlContent);
        const title = $('meta[name="title"]').attr('content');
        const description = $('meta[name="description"]').attr('content');
        const ordinal = $('meta[name="ordinal"]').attr('content');
        const difficulty = $('meta[name="difficulty"]').attr('content');
        const tags = $('meta[name="tag"]').attr('content');
        const icon = $('meta[name="textures/icon"]').attr('content');

        return {
            file: file,
            exerciseName: title,
            description: description,
            ordinal: ordinal,
            difficulty: difficulty,
            tags: tags,
            icon: icon
        };
    });

    // Print the metadata to the console.
    // console.log(metadata);
    // Print a separator to the console.
    // console.log('-------------------');

    const htmlContent = fs.readFileSync('./src/index.html', 'utf-8');
    const $ = cheerio.load(htmlContent);

    // Sort the metadata by the ordinal property.
    // If the ordinal property is not present, it should be sorted to the end of the list.

    const sortedMetadata = metadata.sort((a, b) => {
        if (a.ordinal && b.ordinal) {
            return a.ordinal - b.ordinal;
        } else if (a.ordinal) {
            return -1;
        } else if (b.ordinal) {
            return 1;
        } else {
            return 0;
        }
    });


    const exerciseTable = $(`<table class="table table-striped"> 
    <thead>
    <tr>
    <th scope="col">Week</th>
    <th scope="col">Exercise</th>
    <th scope="col">Exercise Name</th>
    <th scope="col">Preview</th>
    <th scope="col">Difficulty</th>
    <th scope="col">Tags</th>
    </tr>
    </thead>
    <tbody id="exerciseTable">
    </tbody>
    </table>`);

    // Add the table as last element in the body and make it 70% wide and centered.

    $('body').append(exerciseTable);
    $('table').css('width', '70%');
    $('table').css('margin', 'auto');

    // Create a table with the metadata.
    // The first column should derive the week, the second the subexercise.
    // The ordinal should be split by the last two digits. The first part is the week, the second part is the subexercise.
    // The third colum should contain the "d-flex w-100 justify-content-between" div with the exercise name and the description.
    // The fourth column should contain the difficulty. Take the integer value of the difficulty and create a number of stars.
    // The fifth column should contain the tags. The tags should be comma separated and should be clickable. Clicking on a tag should filter the table.
    // Clicking on the exerciseName should open the exercise.

    sortedMetadata.forEach((element, index) => {
        const week = element.ordinal ? element.ordinal.toString().slice(0, -2) : '';
        const subexercise = element.ordinal ? element.ordinal.toString().slice(-2) : '';
        const difficulty = element.difficulty ? element.difficulty : '';
        const tags = element.tags ? element.tags : '';
        const tagsArray = tags.split(',');
        const tagsHtml = tagsArray.map(tag => `<a href="#" class="badge badge-primary">${tag}</a>`).join(' ');
        const exerciseName = element.exerciseName ? element.exerciseName : '';
        const description = element.description ? element.description : '';
        const exerciseLink = element.file ? element.file : '';
        const exerciseLinkHtml = `<a href="${exerciseLink}">${exerciseName}</a>`;
        const iconLink = element.icon ? element.icon : '';
        // The icon should be as tall as the row would be without the icon and center alligned.
        const iconHtml = `<div style="display: flex; justify-content: center; align-items: center;"><img src="${iconLink}" height="50px" class="align-middle"></div>`;


        const row = $(`<tr>
        <th scope="row">${week}</th>
        <td>${subexercise}</td>
        <td>${exerciseLinkHtml}<br>${description}</td>
        <td>${iconHtml}</td>
        <td>${difficulty}</td>
        <td>${tagsHtml}</td>
        </tr>`);
        $('#exerciseTable').append(row);
    });



    // Replace th difficulty with a number of chestnut. Prepend dots so there are always 5 icons.

    const difficultyCells = $('td:nth-child(5)');
    difficultyCells.each((index, element) => {
        const difficulty = $(element).text();
        const difficultyAsInteger = difficulty ? parseInt(difficulty) : 0;
        $(element).text('');
        // Add the chestnut icons.
        for (let i = 0; i < difficultyAsInteger; i++) {
            $(element).append('ðŸŒ°');
        }
        // Add the dots.
        for (let i = 0; i < 5 - difficultyAsInteger; i++) {
            $(element).append('  &#183;');
        }
    });


    // Write the index.html file to the dist directory.
    fs.writeFileSync('./dist/index.html', $.html());

    // This should be done in a more elegant way, but it works for now. TODO: migrate this to a plugin. HtmlWebpackPlugin might be a good starting point.


}

function filter(filePath) {
    const basename = path.basename(filePath);
    const isJsFile = path.extname(filePath) === '.js';
    const isIndexHtml = basename === 'index.html';
    return !isJsFile && !isIndexHtml;
  }

module.exports = {
    generateIndexHtml,
    filter
};
